// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞—Ñ –∏ –ª–∏–±—É –¥–ª—è http –∑–∞–ø—Ä–æ—Å–æ–≤
require('dotenv').config();
const tg = require('telegraf');
const geo = require('./geo');
const weather = require('./weather');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å API –∫–ª—é—á–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const bot = new tg(process.env.BOT_TOKEN);

// –í–µ–ª–∫–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
bot.start((ctx) => {
  console.log('/start', ctx.message);
  ctx.reply('–ü—Ä–∏—à–ª–∏ –ª–æ–∫–µ–π—à–µ–Ω, —É–∑–Ω–∞–µ—à—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –Ω–µ–º üìç');
});

function locationReplier(ctx, lat, lng) {
  console.log('Location received');

  if (!!ctx) {
    console.log(ctx.message);
    lat = ctx.message.location.latitude;
    lng = ctx.message.location.longitude;
  }

  weather.weather(lat, lng)
    .then((resp) => {
      let cw = resp.data.currently;

      console.log(`${cw.summary} ${cw.temperature}ÀöC`);

      let message = `${cw.summary}, *${Math.round(cw.temperature)}*ÀöC ` +
        `(–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${Math.round(cw.apparentTemperature)})\n\n` +
        `–î–∞–≤–ª–µ–Ω–∏–µ ${Math.round(cw.pressure * 0.75006157584566)} –º–º —Ä—Ç. —Å—Ç.\n` +
        `–í–µ—Ç–µ—Ä ${cw.windSpeed} –º/c\n` +
        `–í–ª–∞–∂–Ω–æ—Å—Ç—å ${Math.round(cw.humidity * 100)}%\n` +
        `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: —à:${lat}, –¥:${lng}%\n\n` +
        resp.data.hourly.summary;

      console.log(message);

      return ctx.replyWithPhoto(
        `https://darksky.net/images/weather-icons/${cw.icon}.png`,
        {
          caption: message,
          parse_mode: 'Markdown'
        });
    })
    .catch((err) => {
      let errMsg = `${err.name}/${err.statusCode}/${err.message}`;
      console.log(errMsg);
      ctx.reply('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ... \n' + errMsg);
    });
}


// –ù–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∏–ø–æ–º location –ª–µ–∑–µ–º –≤ –ø–æ–≥–æ–¥–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ –æ—Ç–¥–∞–µ–º –ø–æ–≥–æ–¥—É
bot.on('location', locationReplier);

// –ù–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—Ä–æ–º–µ location –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
bot.on('message', (ctx) => {
  console.log('Message received', ctx.message);

  geo.geoCodeAddress(ctx.message.text)
    .then((resp) => {
      return locationReplier(undefined, resp.lat, resp.lng);
    })
    .catch((err) => {
      let errMsg = `${err.name}/${err.statusCode}/${err.message}`;
      console.log(errMsg);
      ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞ ü§∑‚Äç‚ôÇÔ∏è\n');
    });
});

// Launch bot connected to TG API
console.log('Bot launched');
bot.launch();
